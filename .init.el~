;;; packge ---- Summary
;;; Commentary:

;;; Code:

;; stop startup message
(setq inhibit-startup-screen t)

;; set up package sources
(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives
	     '("melpa" . "https://melpa.org/packages/"))
(package-initialize)

;; Bootstrap `use-package'
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

;; small interface tweaks
(setq inhibit-startup-message t)
(tool-bar-mode -1)
(fset 'yes-or-no-p 'y-or-n-p)
(global-set-key (kbd "<f5>") 'revert-buffer)

;; try packages for length of session
(use-package try
  :ensure t)

;; bring up help for key bindings
(use-package which-key
  :ensure t
  :config (which-key-mode))

;; turn on in-do mode (interactive doing things mode)
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)


;;buffers
(defalias 'list-buffers 'ibuffer) ; make ibuffer default



;; Auto completion
(use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)
    ))


;; on the fly syntax checking
(use-package flycheck
  :ensure t
  :init
  (global-flycheck-mode t))

;; snippets and snippet expansion
(use-package yasnippet
  :ensure t
  :init
  (yas-global-mode 1))


;; tags for code navigation
(use-package ggtags
  :ensure t
  :config
  (add-hook 'c-mode-common-hook
	    (lambda ()
	      (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
		(ggtags-mode 1))))
  )


;; Theme
(use-package color-theme
  :ensure t)
(use-package moe-theme
  :ensure t)
(moe-light)

;;; .init.el ends here
